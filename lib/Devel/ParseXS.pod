=head1 NAME

Devel::ParseXS - Parse an XS file into an AST

=head1 VERSION

Version 0.00_01

=head1 SYNOPSIS

    use Devel::ParseXS;

    my $parser = Devel::ParseXS->new();
    $parser->parse_file( $file );


=head1 DESCRIPTION

B<Devel::ParseXS> reads L<XS|http://perldoc.perl.org/perlxs.html>
files and constructs an AST (using B<L<Devel::XS::AST>>). It
does not generate any C or C++ code.

B<Devel::ParseXS> is designed to parse XS files similarly to
B<L<ExtUtils::ParseXS>>.  Known differences are listed in the
L</CAVEATS> section.

B<This is alpha quality code.> All interfaces are provisional and are
subject to change.

Please see B<L<Devel::XS::AST>> for the structure of the AST.

=head2 Current Status

B<Devel::ParseXS> should be able to parse syntactically correct XS
files without error.  It currently stores input blocks which it currently
does not understand as B<Devel::XS::AST::Data> objects.


=head1 METHODS

Please don't make any use or assumptions about anything which isn't
documented here.  Instead, please contact the author.

=head2 new

  $parser = Devel::ParseXS->new;

Construct a parser object.

=head2 parse_file

  # open and parse XS file
  $parser->parse_file( $xs_file );

  # parse XS code in a string
  $parser->parse_file( \$xs_code );

Parse XS code into an AST.  It can be passed either a file name or a
reference to a string containing the XS code.

The code must be complete; see the
L<perlxs|http://perldoc.perl.org/perlxs.html> documentation for more
information.

=head2 tree

   $ast = $parser->tree;

Return the AST, which is a B<L<Devel::XS::Element::Container>> object.
Each element in that container is an object subclassed from
B<Devel::XS::Element>.  Elements are added as they are found in the XS
code.

=head1 CAVEATS

The following are known differences between the behavior of this
module and B<L<ExtUtils::ParseXS>>:

=over

=item *

Embedded typemaps (via the C<TYPEMAP> keyword)

Embedded typemaps should not appear in XSUB sections, e.g., the
following is not recognized:

  int foo( a )
     TYPEMAP: << EOT


  EOT
     INIT:
        ...

L<perlxs> does not explicitly forbid this, and B<ExtUtils::ParseXS>
will accept the input without error, but the resulting output does not
appear to be correct.

=back



=head1 AUTHOR

Diab Jerius, C<< <djerius at cpan.org> >>

=head1 BUGS

Please report any bugs or feature requests to C<bug-devel-parsexs at rt.cpan.org>, or through
the web interface at L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Devel-ParseXS>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.




=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc Devel::ParseXS


You can also look for information at:

=over 4

=item * RT: CPAN's request tracker (report bugs here)

L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Devel-ParseXS>

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/Devel-ParseXS>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/Devel-ParseXS>

=item * Search CPAN

L<http://search.cpan.org/dist/Devel-ParseXS/>

=back


=head1 ACKNOWLEDGEMENTS

Much of this code was based upon B<L<ExtUtils::ParseXS>> and
L<perlxs|http://perldoc.perl.org/perlxs.html>.

=head1 AUTHOR

Diab Jerius E<lt>djerius@cpan.orgE<gt>


=head1 LICENSE AND COPYRIGHT

Copyright (C) 2014 Smithsonian Astrophysical Observatory

Copyright (C) 2014 Diab Jerius

This program is free software: you can redistribute it and/or modify
it under the same terms as Perl itself.

Portions taken from ExtUtils::ParseXS, Copyright 2002-2013 by Ken
Williams, David Golden and other contributors.


=cut
