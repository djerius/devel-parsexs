#!/usr/bin/env perl

use latest;

use CPAN::Visitor;

use ddGUI;
use DBI;
use DDP;
use Path::Tiny;
use Getopt::Long::Descriptive;
use Try::Tiny;

use File::pushd;

use FindBin qw( $Bin );
use lib "$Bin";
use lib "$Bin/../lib";

use utils;

use Devel::ParseXS;


my $use_CPAN_Mini;

BEGIN {
    $use_CPAN_Mini = eval "use CPAN::Mini; 1 ";
}

my ( $opt, $usage ) = describe_options(

    "$0 %o",
    [ 'cpan=s', "cpan" ],
    [ 'db=s',          "sqlite db",              { default => 'metacpan.db' } ],
    [ 'dbtrace=i',     'dbi trace level',        { default => 0 } ],
    [ 'dist=s@',       'specific dists to test', { default => [] } ],
    [ 'filter-dist=s', 'distribution filter', ],
    [ 'filter-xs=s',   'xs file filter',         { default => 'all' } ],
    [ 'jobs=i',    'number of parallel jobs', { default => 0 } ],
    [ 'verbose:+', 'verbose+', ],
);

if ( !$opt->cpan && $use_CPAN_Mini ) {

    my %config = CPAN::Mini->read_config;
    $opt->{cpan} = $config{local};

}

die( "must specify --cpan\n" )
  unless defined $opt->cpan;

my $dbh_s = DBI->connect(
    "dbi:SQLite:dbname=@{[ $opt->db ]}",
    {
        RaiseError          => 1,
        AutoInactiveDestroy => 1,
        AutoCommit          => 1,
    } );

$dbh_s->trace( $opt->dbtrace );

my $dbh_u = $dbh_s->clone( {
    RaiseError          => 1,
    AutoCommit          => 1,
    AutoInactiveDestroy => 1,
} );

$dbh_u->do(
    q[create table
  if not exists
  pass (distribution text, path text, passed boolean)
] );


my $distributions = fetch_distributions( $dbh_s );


my $visitor = CPAN::Visitor->new(
    cpan  => $opt->cpan,
    files => $distributions
);

my $select = $dbh_s->prepare( filter( $opt->filter_xs, 'xs' ) );


$visitor->iterate(
    check => \&check_dist,
    visit => \&process_dist,
    jobs  => $opt->jobs,
);

sub fetch_distributions {

    my ( $dbh ) = @_;

    my @distributions;

    if ( @{ $opt->dist } ) {

        warn( "ignoring --filter-dist if --dist is specified\n" )
          if $opt->filter_dist;

        my $sth = $dbh->prepare( filter( qw[ specific dists ] ) );

        for my $dist ( @{ $opt->dist } ) {

            $sth->execute( $dist );

            push @distributions, $sth->fetchrow_array;
        }

    }
    else {

        $opt->{'filter_dist'} //= 'all';

        my $rv
          = $dbh->selectall_arrayref( filter( $opt->filter_dist, 'dists' ) );

        @distributions = map { @{$_} } @$rv;

    }

    return \@distributions;
}

sub check_dist {

    my $job = shift;

    return 1 if -f $job->{distpath};

    warn "Cannot find $job->{distpath}; trying another extension\n";

    $job->{distpath} =~ s/[.]([^.]+)$//;
    my $ext = {
        'zip'    => 'tar.gz',
        'tar.gz' => 'zip'
    }->{$1};

    if ( !defined $ext ) {
        warn( "canot recognize extension '$1' for $job->{distpath}\n" );
        return 0;
    }

    $job->{distpath} .= ".$ext";

    if ( !-f $job->{distpath} ) {
        warn( "cannot find $job->{distpath} with alternate extension\n" );
        return 0;
    }

    return 1;

}

sub process_dist {
    my $job = shift;

    say $job->{distfile}
      if $opt->verbose;

    my $res
      = $dbh_s->selectall_arrayref( $select, {},
        ( $job->{distfile} ) x $select->{NUM_OF_PARAMS} );

    my @xs = map { @$_ } @$res;

    for my $xs ( @xs ) {

        my $parser = Devel::ParseXS->new;

        my $path = path( $xs );

        my $dir  = pushd( $path->parent );
        my $file = $path->basename;

        my $success = 0;
        print $path
          if $opt->verbose > 1;
        try {
            $parser->parse_file( $file );
            $success = 1;
            say ' ... pass'
              if $opt->verbose > 1;
        }
        catch {
            say ' ... fail:'
              if $opt->verbose > 1;

            say STDERR "$job->{distfile}/$xs: $_";
        };

        update_parse_results( $dbh_u, $job->{distfile}, $path, $success );
    }

    return 1;
}

sub update_parse_results {

    my ( $dbh_u, $distribution, $path, $success ) = @_;

    state $update = $dbh_u->prepare(
        q[
update pass
   set passed = ?
 where distribution = ?
   and path = ?
] );

    state $insert = $dbh_u->prepare(
        q[
insert into pass
       (  passed, distribution, path )
values ( ?, ?, ?)
] );

    if ( 0 == $update->execute( $success, $distribution, $path ) ) {

        if ( 0 == $insert->execute( $success, $distribution, $path ) ) {

            croak(
                "error updating status for $distribution:$path = $success\n" );
        }

    }
}


